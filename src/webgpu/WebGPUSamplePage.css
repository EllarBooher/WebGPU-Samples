.lil-gui {
	--title-background-color: var(--background-color-darkest);
	--title-text-color: var(--text-color);
	--background-color: var(--background-color-dark);
	--widget-color: var(--background-color-light);
	--hover-color: var(--background-color-lightest);
	--focus-color: var(--background-color-lightest);
	--number-color: var(--text-color);
	--string-color: var(--text-color);
}

.lil-gui.root {
	max-height: 100%;
}

.lil-gui.root > .children {
	overflow-y: scroll;
}

.lil-gui option {
	color: black;
}

.lil-gui.transition.root > .children {
	overflow-y: scroll;
}

.webgpu-samples-canvas-container {
	flex: 1;

	/*
	relative allows absolute children (canvas & GUI pane) to snap to the edge of
	the rendering area and not some other parent It also allows the canvas to fill
	the exact visible area and overflow: hidden any extra

	Other techniques seems to always add a scrollbar for the canvas when zooming
	or even at 100% zoom This arrangement keeps the canvas filling the available
	area which is what we want.
	*/
	position: relative;
	overflow: hidden;
}

.webgpu-samples-canvas {
	position: absolute;
	width: 100%;
	height: 100%;
}

.webgpu-samples-gui-floating {
	position: absolute;
	right: 0;
}

.webgpu-samples-info {
	margin: 0;
	padding: 2rem;
	background-color: var(--background-color-light);
	flex: 1;
}

.webgpu-samples-error {
	padding: 2rem;
	background-color: #91433f;
}
